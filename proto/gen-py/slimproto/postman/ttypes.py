#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class aps_alert:
  """
  Attributes:
   - title
   - body
   - title_loc_key
   - title_loc_args
   - action_loc_key
   - loc_key
   - loc_args
   - launch_image
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'body', None, None, ), # 2
    (3, TType.STRING, 'title_loc_key', None, None, ), # 3
    (4, TType.LIST, 'title_loc_args', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'action_loc_key', None, None, ), # 5
    (6, TType.STRING, 'loc_key', None, None, ), # 6
    (7, TType.LIST, 'loc_args', (TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'launch_image', None, None, ), # 8
  )

  def __init__(self, title=None, body=None, title_loc_key=None, title_loc_args=None, action_loc_key=None, loc_key=None, loc_args=None, launch_image=None,):
    self.title = title
    self.body = body
    self.title_loc_key = title_loc_key
    self.title_loc_args = title_loc_args
    self.action_loc_key = action_loc_key
    self.loc_key = loc_key
    self.loc_args = loc_args
    self.launch_image = launch_image

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.body = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title_loc_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.title_loc_args = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.title_loc_args.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.action_loc_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.loc_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.loc_args = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.loc_args.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.launch_image = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('aps_alert')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 2)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    if self.title_loc_key is not None:
      oprot.writeFieldBegin('title_loc_key', TType.STRING, 3)
      oprot.writeString(self.title_loc_key)
      oprot.writeFieldEnd()
    if self.title_loc_args is not None:
      oprot.writeFieldBegin('title_loc_args', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.title_loc_args))
      for iter12 in self.title_loc_args:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.action_loc_key is not None:
      oprot.writeFieldBegin('action_loc_key', TType.STRING, 5)
      oprot.writeString(self.action_loc_key)
      oprot.writeFieldEnd()
    if self.loc_key is not None:
      oprot.writeFieldBegin('loc_key', TType.STRING, 6)
      oprot.writeString(self.loc_key)
      oprot.writeFieldEnd()
    if self.loc_args is not None:
      oprot.writeFieldBegin('loc_args', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.loc_args))
      for iter13 in self.loc_args:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.launch_image is not None:
      oprot.writeFieldBegin('launch_image', TType.STRING, 8)
      oprot.writeString(self.launch_image)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.body is None:
      raise TProtocol.TProtocolException(message='Required field body is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.body)
    value = (value * 31) ^ hash(self.title_loc_key)
    value = (value * 31) ^ hash(self.title_loc_args)
    value = (value * 31) ^ hash(self.action_loc_key)
    value = (value * 31) ^ hash(self.loc_key)
    value = (value * 31) ^ hash(self.loc_args)
    value = (value * 31) ^ hash(self.launch_image)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class aps_payload:
  """
  Attributes:
   - alert
   - badge
   - sound
   - content_available
   - acme
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'alert', (aps_alert, aps_alert.thrift_spec), None, ), # 1
    (2, TType.I32, 'badge', None, None, ), # 2
    (3, TType.STRING, 'sound', None, None, ), # 3
    (4, TType.I32, 'content_available', None, None, ), # 4
    (5, TType.MAP, 'acme', (TType.STRING,None,TType.STRING,None), None, ), # 5
  )

  def __init__(self, alert=None, badge=None, sound=None, content_available=None, acme=None,):
    self.alert = alert
    self.badge = badge
    self.sound = sound
    self.content_available = content_available
    self.acme = acme

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.alert = aps_alert()
          self.alert.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.badge = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sound = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.content_available = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.acme = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readString()
            _val20 = iprot.readString()
            self.acme[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('aps_payload')
    if self.alert is not None:
      oprot.writeFieldBegin('alert', TType.STRUCT, 1)
      self.alert.write(oprot)
      oprot.writeFieldEnd()
    if self.badge is not None:
      oprot.writeFieldBegin('badge', TType.I32, 2)
      oprot.writeI32(self.badge)
      oprot.writeFieldEnd()
    if self.sound is not None:
      oprot.writeFieldBegin('sound', TType.STRING, 3)
      oprot.writeString(self.sound)
      oprot.writeFieldEnd()
    if self.content_available is not None:
      oprot.writeFieldBegin('content_available', TType.I32, 4)
      oprot.writeI32(self.content_available)
      oprot.writeFieldEnd()
    if self.acme is not None:
      oprot.writeFieldBegin('acme', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.acme))
      for kiter21,viter22 in self.acme.items():
        oprot.writeString(kiter21)
        oprot.writeString(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.alert is None:
      raise TProtocol.TProtocolException(message='Required field alert is unset!')
    if self.badge is None:
      raise TProtocol.TProtocolException(message='Required field badge is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.alert)
    value = (value * 31) ^ hash(self.badge)
    value = (value * 31) ^ hash(self.sound)
    value = (value * 31) ^ hash(self.content_available)
    value = (value * 31) ^ hash(self.acme)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
